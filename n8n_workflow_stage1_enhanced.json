{
  "name": "SlideRx - Stage 1: Initial Processing",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sliderx-stage1",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-start",
      "name": "Start Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "stage1-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Parse Lambda Input - Extract and validate\nconst body = $input.item.json.body || $input.item.json;\n\nreturn {\n  projectId: body.projectId,\n  s3Bucket: body.s3Bucket || 'sliderx-uploads-dev',\n  s3Key: body.s3Key,\n  projectBrief: body.projectBrief || {},\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "parse-lambda-input",
      "name": "Parse Lambda Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract S3 Info and validate required fields\nconst data = $input.item.json;\n\n// Validate required fields\nif (!data.projectId || !data.s3Bucket || !data.s3Key) {\n  throw new Error('Missing required fields: projectId, s3Bucket, or s3Key');\n}\n\nreturn {\n  projectId: data.projectId,\n  s3Bucket: data.s3Bucket,\n  s3Key: data.s3Key,\n  projectBrief: data.projectBrief,\n  timestamp: data.timestamp,\n  validated: true\n};"
      },
      "id": "extract-s3-info",
      "name": "Extract S3 Info (projectId, bucket, key, brief)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validate Input - Check all required fields\nconst data = $input.item.json;\n\nconst validation = {\n  hasProjectId: !!data.projectId,\n  hasS3Bucket: !!data.s3Bucket,\n  hasS3Key: !!data.s3Key,\n  hasProjectBrief: !!data.projectBrief && typeof data.projectBrief === 'object'\n};\n\nconst isValid = validation.hasProjectId && validation.hasS3Bucket && \n                validation.hasS3Key && validation.hasProjectBrief;\n\nif (!isValid) {\n  throw new Error(`Validation failed: ${JSON.stringify(validation)}`);\n}\n\nreturn {\n  ...data,\n  validation,\n  validatedAt: new Date().toISOString()\n};"
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "download",
        "bucketName": "={{ $json.s3Bucket }}",
        "fileKey": "={{ $json.s3Key }}",
        "options": {}
      },
      "id": "download-pdf-s3",
      "name": "Download PDF from S3",
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 1,
      "position": [1120, 300],
      "credentials": {
        "aws": {
          "id": "PLACEHOLDER_AWS",
          "name": "AWS S3 SlideRx"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://pdf-services:8000/extract-text",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "extract-text",
      "name": "Extract Text from PDF via PDF Service",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare AI Prompt (System + User Prompts)\nconst extractedData = $input.item.json;\nconst projectData = $('Validate Input').first().json;\n\nconst systemPrompt = `You are a presentation strategist trained in Nancy Duarte and Dan Roam principles.\n\nYour task is to:\n1. Generate a per-slide summary of the presentation\n2. Identify 2-4 clarifying questions to ask the user before creating the final 3-slide summary\n\nOutput JSON format:\n{\n  \"summary\": [\n    {\"slideNumber\": 1, \"title\": \"slide title\", \"keyPoints\": \"2-3 sentence summary\"},\n    {\"slideNumber\": 2, \"title\": \"slide title\", \"keyPoints\": \"2-3 sentence summary\"}\n  ],\n  \"reviewAndRefine\": {\n    \"questions\": [\n      {\"question\": \"What is your target audience's technical level?\", \"type\": \"text\"},\n      {\"question\": \"What is the desired outcome of this presentation?\", \"type\": \"text\"}\n    ]\n  }\n}`;\n\nconst projectBrief = projectData.projectBrief;\nconst userPrompt = `PRESENTATION CONTENT:\n${extractedData.fullText}\n\nBUSINESS CONTEXT:\nPurpose: ${projectBrief.businessPurpose || 'Not specified'}\nProject Phase: ${projectBrief.projectPhase || 'Not specified'}\nKey Metrics: ${projectBrief.keyMetrics || 'Not specified'}\nCurrent Blockers: ${projectBrief.currentBlockers || 'Not specified'}\n\nPages: ${extractedData.pageCount}\n\nPlease:\n1. Create a per-slide summary (title + 2-3 sentence summary of key points)\n2. Ask 2-4 clarifying questions that would help create a better 3-slide executive summary`;\n\nreturn {\n  projectId: projectData.projectId,\n  systemPrompt: systemPrompt,\n  userPrompt: userPrompt,\n  preparedAt: new Date().toISOString()\n};"
      },
      "id": "prepare-ai-prompt",
      "name": "Prepare AI Prompt (System + User Prompts)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "api-check",
              "leftValue": "={{ true }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-api-available",
      "name": "Is API Available?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "HTTP-Referer",
              "value": "https://sliderx.app"
            },
            {
              "name": "X-Title",
              "value": "SlideRx"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"anthropic/claude-sonnet-4\",\n  \"messages\": [\n    {\"role\": \"system\", \"content\": {{ $json.systemPrompt }}},\n    {\"role\": \"user\", \"content\": {{ $json.userPrompt }}}\n  ],\n  \"max_tokens\": 3000,\n  \"temperature\": 0.7\n}",
        "options": {
          "timeout": 90000,
          "retry": {
            "retry": {
              "maxRetries": 3,
              "retryInterval": 1000
            }
          }
        }
      },
      "id": "call-openrouter-api",
      "name": "Call OpenRouter API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 200],
      "credentials": {
        "openRouterApi": {
          "id": "PLACEHOLDER_OPENROUTER",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI Response (Extract summary + reviewAndRefine)\nconst item = $input.item.json;\nconst projectId = $('Prepare AI Prompt (System + User Prompts)').first().json.projectId;\n\ntry {\n  let content = item.choices[0].message.content;\n  \n  // Remove markdown code blocks if present\n  content = content.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n  \n  const parsed = JSON.parse(content);\n  \n  if (!parsed.summary || !parsed.reviewAndRefine) {\n    throw new Error('Missing required fields in AI response');\n  }\n  \n  return {\n    projectId: projectId,\n    summary: parsed.summary,\n    reviewAndRefine: parsed.reviewAndRefine,\n    parsedAt: new Date().toISOString()\n  };\n  \n} catch (error) {\n  console.error('Parse error:', error);\n  throw new Error(`Failed to parse AI response: ${error.message}`);\n}"
      },
      "id": "parse-ai-response",
      "name": "Parse AI Response (Extract summary + reviewAndRefine)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 200]
    },
    {
      "parameters": {
        "jsCode": "// Validate AI Response Format\nconst data = $input.item.json;\n\n// Check summary structure\nif (!Array.isArray(data.summary) || data.summary.length === 0) {\n  throw new Error('Invalid summary format: must be non-empty array');\n}\n\n// Validate each summary item\nfor (const slide of data.summary) {\n  if (!slide.slideNumber || !slide.title || !slide.keyPoints) {\n    throw new Error(`Invalid slide summary: missing required fields`);\n  }\n}\n\n// Check reviewAndRefine structure\nif (!data.reviewAndRefine || !Array.isArray(data.reviewAndRefine.questions)) {\n  throw new Error('Invalid reviewAndRefine format');\n}\n\n// Validate questions\nfor (const q of data.reviewAndRefine.questions) {\n  if (!q.question || !q.type) {\n    throw new Error('Invalid question format: missing question or type');\n  }\n}\n\nreturn {\n  ...data,\n  validated: true,\n  validatedAt: new Date().toISOString()\n};"
      },
      "id": "validate-ai-response",
      "name": "Validate AI Response Format",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://f9yntj41f4.execute-api.eu-central-1.amazonaws.com/dev/projects/{{ $json.projectId }}/review",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"summary\": {{ $json.summary }},\n  \"reviewAndRefine\": {{ $json.reviewAndRefine }},\n  \"status\": \"needs_review\"\n}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "post-to-api-gateway",
      "name": "Post to API Gateway /projects/{id}/review",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2660, 200]
    },
    {
      "parameters": {
        "jsCode": "// Log Success Metrics\nconst data = $input.item.json;\nconst startTime = $('Parse Lambda Input').first().json.timestamp;\nconst endTime = new Date().toISOString();\n\nconst duration = new Date(endTime) - new Date(startTime);\n\nconsole.log('SUCCESS - Stage 1 Completed:', {\n  projectId: $('Validate AI Response Format').first().json.projectId,\n  duration: `${duration}ms`,\n  summarySlides: $('Validate AI Response Format').first().json.summary.length,\n  questions: $('Validate AI Response Format').first().json.reviewAndRefine.questions.length,\n  timestamp: endTime\n});\n\nreturn {\n  projectId: $('Validate AI Response Format').first().json.projectId,\n  status: 'success',\n  duration,\n  timestamp: endTime,\n  apiResponse: data\n};"
      },
      "id": "log-success-metrics",
      "name": "Log Success Metrics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2880, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "post-success-check",
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": "200",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-post-success",
      "name": "Post Successful?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [3100, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"projectId\": \"{{ $('Log Success Metrics').first().json.projectId }}\",\n  \"status\": \"needs_review\",\n  \"message\": \"Initial processing complete. Awaiting user answers.\",\n  \"duration\": {{ $('Log Success Metrics').first().json.duration }}\n}",
        "options": {}
      },
      "id": "send-success-response",
      "name": "Send Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [3320, 120]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"projectId\": \"{{ $('Log Success Metrics').first().json.projectId }}\",\n  \"status\": \"error\",\n  \"message\": \"Failed to post results to API Gateway\",\n  \"error\": \"API Gateway POST failed\",\n  \"retryInfo\": {\n    \"canRetry\": true,\n    \"retryAfter\": 5000\n  }\n}",
        "responseCode": 500,
        "options": {}
      },
      "id": "send-error-with-retry",
      "name": "Send Error with Retry Info",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [3320, 280]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"projectId\": \"{{ $('Prepare AI Prompt (System + User Prompts)').first().json.projectId }}\",\n  \"status\": \"error\",\n  \"message\": \"OpenRouter API is currently unavailable\",\n  \"error\": \"API unavailable or rate limited\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "responseCode": 503,
        "options": {}
      },
      "id": "send-error-response",
      "name": "Send Error Response (API Unavailable)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [2000, 400]
    }
  ],
  "connections": {
    "Start Webhook": {
      "main": [[{"node": "Parse Lambda Input", "type": "main", "index": 0}]]
    },
    "Parse Lambda Input": {
      "main": [[{"node": "Extract S3 Info (projectId, bucket, key, brief)", "type": "main", "index": 0}]]
    },
    "Extract S3 Info (projectId, bucket, key, brief)": {
      "main": [[{"node": "Validate Input", "type": "main", "index": 0}]]
    },
    "Validate Input": {
      "main": [[{"node": "Download PDF from S3", "type": "main", "index": 0}]]
    },
    "Download PDF from S3": {
      "main": [[{"node": "Extract Text from PDF via PDF Service", "type": "main", "index": 0}]]
    },
    "Extract Text from PDF via PDF Service": {
      "main": [[{"node": "Prepare AI Prompt (System + User Prompts)", "type": "main", "index": 0}]]
    },
    "Prepare AI Prompt (System + User Prompts)": {
      "main": [[{"node": "Is API Available?", "type": "main", "index": 0}]]
    },
    "Is API Available?": {
      "main": [
        [{"node": "Call OpenRouter API", "type": "main", "index": 0}],
        [{"node": "Send Error Response (API Unavailable)", "type": "main", "index": 0}]
      ]
    },
    "Call OpenRouter API": {
      "main": [[{"node": "Parse AI Response (Extract summary + reviewAndRefine)", "type": "main", "index": 0}]]
    },
    "Parse AI Response (Extract summary + reviewAndRefine)": {
      "main": [[{"node": "Validate AI Response Format", "type": "main", "index": 0}]]
    },
    "Validate AI Response Format": {
      "main": [[{"node": "Post to API Gateway /projects/{id}/review", "type": "main", "index": 0}]]
    },
    "Post to API Gateway /projects/{id}/review": {
      "main": [[{"node": "Log Success Metrics", "type": "main", "index": 0}]]
    },
    "Log Success Metrics": {
      "main": [[{"node": "Post Successful?", "type": "main", "index": 0}]]
    },
    "Post Successful?": {
      "main": [
        [{"node": "Send Success Response", "type": "main", "index": 0}],
        [{"node": "Send Error with Retry Info", "type": "main", "index": 0}]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-09T11:00:00.000Z",
  "versionId": "1"
}
