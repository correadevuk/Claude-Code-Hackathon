# SlideRx Mermaid Diagrams - Raw Code

## Diagram 1: Overview Architecture
```mermaid
graph TB
    subgraph "Frontend (React)"
        UI[User Interface]
    end

    subgraph "AWS Infrastructure"
        API[API Gateway]
        Lambda[Lambda Functions]
        S3Upload[S3: sliderx-uploads-dev]
        S3Output[S3: sliderx-outputs-dev]
        DDB[(DynamoDB)]
    end

    subgraph "n8n Workflows (Docker)"
        N8N_S1[n8n Stage 1<br/>Webhook]
        N8N_S2[n8n Stage 2<br/>Webhook]
        PDF_SVC[PDF Services<br/>FastAPI]
    end

    subgraph "External Services"
        OpenRouter[OpenRouter API<br/>Claude Sonnet 4]
    end

    UI -->|1. POST /projects| API
    API -->|2. Pre-signed URL| UI
    UI -->|3. Upload PDF| S3Upload
    S3Upload -->|4. Trigger| Lambda
    Lambda -->|5. Webhook POST| N8N_S1
    N8N_S1 -->|6. Extract PDF| PDF_SVC
    N8N_S1 -->|7. AI Analysis| OpenRouter
    N8N_S1 -->|8. POST /ai/callback| API
    API -->|9. Update| DDB
    UI -->|10. GET /projects/{id}| API
    API -->|11. Return status| UI

    UI -->|12. POST /projects/{id}<br/>with answers| API
    API -->|13. Webhook POST| N8N_S2
    N8N_S2 -->|14. AI Generate| OpenRouter
    N8N_S2 -->|15. Create PDF| PDF_SVC
    N8N_S2 -->|16. Upload result.pdf| S3Output
    S3Output -->|17. Trigger Update| DDB
    UI -->|18. Poll & Download| API
```

---

## Diagram 2: Stage 1 Sequence (Extraction & Review)
```mermaid
sequenceDiagram
    actor User
    participant UI as Frontend
    participant API as API Gateway
    participant S3 as S3 Uploads
    participant Lambda
    participant n8n as n8n Stage 1
    participant PDF as PDF Service
    participant AI as OpenRouter
    participant DB as DynamoDB

    User->>UI: 1. Upload presentation PDF
    UI->>API: 2. POST /projects<br/>{fileName, projectBrief}
    API->>DB: 3. Create project<br/>status: "pending"
    API->>UI: 4. Return {projectId, uploadUrl}

    UI->>S3: 5. PUT PDF to pre-signed URL
    S3->>Lambda: 6. S3 Event Trigger

    Lambda->>n8n: 7. POST webhook/sliderx-stage1<br/>{projectId, s3Key, projectBrief}

    n8n->>S3: 8. Download PDF
    S3->>n8n: 9. Return PDF binary

    n8n->>PDF: 10. POST /extract-text<br/>{file: pdf}
    PDF->>n8n: 11. Return extracted text

    n8n->>AI: 12. Analyze presentation<br/>+ Generate summary + questions
    AI->>n8n: 13. Return analysis

    n8n->>API: 14. POST /projects/{projectId}/ai/callback<br/>{userId, summary, reviewAndRefine}
    API->>DB: 15. Update project<br/>status: "needs_review"
    API->>n8n: 16. 200 OK

    UI->>API: 17. GET /projects/{projectId}<br/>(polling)
    API->>DB: 18. Query project
    DB->>API: 19. Return data
    API->>UI: 20. {status, summary, reviewAndRefine}

    UI->>User: 21. Display summary + 3 questions
```

---

## Diagram 3: Stage 2 Sequence (Final Generation)
```mermaid
sequenceDiagram
    actor User
    participant UI as Frontend
    participant API as API Gateway
    participant n8n as n8n Stage 2
    participant AI as OpenRouter
    participant PDF as PDF Service
    participant S3 as S3 Outputs
    participant DB as DynamoDB

    User->>UI: 1. Submit answers to 3 questions

    UI->>API: 2. POST /projects/{projectId}<br/>{reviewAndRefine with userAnswers}
    API->>DB: 3. Update project with answers<br/>status: "processing"

    API->>n8n: 4. POST webhook/sliderx-stage2<br/>{projectId, projectBrief,<br/>summary, reviewAndRefine}
    API->>UI: 5. 200 OK

    n8n->>AI: 6. Generate 3-slide presentation<br/>(Problem/Solution/Ask)
    AI->>n8n: 7. Return slides structure

    n8n->>PDF: 8. POST /generate-pdf<br/>{projectId, slide1, slide2, slide3}
    PDF->>n8n: 9. Return PDF binary

    n8n->>S3: 10. PUT /outputs/{userId}/{projectId}/result.pdf
    S3->>n8n: 11. 200 OK

    S3->>DB: 12. S3 Trigger updates project<br/>status: "ready",<br/>outputFileKey: "..."

    UI->>API: 13. GET /projects/{projectId}<br/>(polling)
    API->>DB: 14. Query project
    DB->>API: 15. Return data
    API->>UI: 16. {status: "ready", downloadUrl}

    UI->>User: 17. Show "Download PDF" button
    User->>UI: 18. Click download
    UI->>S3: 19. GET pre-signed URL
    S3->>UI: 20. Return PDF file
```

---

## Diagram 4: Status State Machine
```mermaid
stateDiagram-v2
    [*] --> pending: User creates project
    pending --> processing: S3 upload triggers Stage 1
    processing --> needs_review: n8n posts AI callback
    needs_review --> processing: User submits answers
    processing --> ready: S3 output file uploaded
    ready --> [*]: User downloads PDF

    processing --> failed: Error in n8n/AI
    failed --> processing: Retry
```

---

## Diagram 5: Simplified Two-Stage Flow (Alternative View)
```mermaid
flowchart TD
    Start([User Uploads PDF]) --> S1_Trigger[S3 Upload Triggers Lambda]
    S1_Trigger --> S1_Webhook[Lambda → n8n Stage 1 Webhook]

    subgraph Stage1[Stage 1: Extraction & Review]
        S1_Webhook --> S1_Download[Download PDF from S3]
        S1_Download --> S1_Extract[Extract Text via PDF Service]
        S1_Extract --> S1_AI[AI Analysis: Summary + Questions]
        S1_AI --> S1_Callback[POST /ai/callback to API]
        S1_Callback --> S1_DB[DynamoDB: status = needs_review]
    end

    S1_DB --> UserReview{User Reviews Summary}
    UserReview --> UserAnswers[User Submits 3 Answers]
    UserAnswers --> S2_Trigger[API → n8n Stage 2 Webhook]

    subgraph Stage2[Stage 2: Final Generation]
        S2_Trigger --> S2_AI[AI Generates 3 Slides]
        S2_AI --> S2_PDF[PDF Service Creates PDF]
        S2_PDF --> S2_Upload[Upload to S3 Outputs]
        S2_Upload --> S2_DB[S3 Trigger Updates DynamoDB]
        S2_DB --> S2_Status[status = ready]
    end

    S2_Status --> End([User Downloads Result])

    style Stage1 fill:#e1f5ff,stroke:#0066cc
    style Stage2 fill:#fff4e1,stroke:#cc8800
```

---

## Diagram 6: n8n Internal Workflow Structure
```mermaid
graph LR
    subgraph "n8n Stage 1 Workflow"
        W1[Webhook Trigger] --> Parse1[Parse Input]
        Parse1 --> S3Down[S3 Download Node]
        S3Down --> Extract[HTTP: PDF Extract]
        Extract --> AI1[HTTP: OpenRouter AI]
        AI1 --> Format1[Function: Format Output]
        Format1 --> Callback[HTTP: POST /ai/callback]
    end

    subgraph "n8n Stage 2 Workflow"
        W2[Webhook Trigger] --> Parse2[Parse Input]
        Parse2 --> AI2[HTTP: OpenRouter AI]
        AI2 --> Format2[Function: Format Slides]
        Format2 --> GenPDF[HTTP: Generate PDF]
        GenPDF --> S3Up[S3 Upload Node]
    end
```

---

## Diagram 7: Data Flow with Payload Details
```mermaid
graph TD
    A[Lambda Payload] -->|projectId, s3Key, projectBrief| B[n8n Stage 1]
    B -->|PDF Binary| C[PDF Service /extract-text]
    C -->|Extracted Text| D[AI Analysis]
    D -->|Summary + Questions JSON| E[n8n Format]
    E -->|userId, summary, reviewAndRefine| F[API /ai/callback]

    G[User Answers] -->|reviewAndRefine with userAnswers| H[API POST /projects/id]
    H -->|Full Context| I[n8n Stage 2]
    I -->|Prompt + Context| J[AI Generation]
    J -->|slide1, slide2, slide3 JSON| K[PDF Service /generate-pdf]
    K -->|PDF Binary| L[S3 Upload]
    L -->|Automatic Trigger| M[DynamoDB Update]

    style A fill:#ffe6e6
    style F fill:#e6ffe6
    style G fill:#ffe6e6
    style M fill:#e6ffe6
```

---

## Usage Instructions

### For Mermaid Live Editor (mermaid.live):
1. Go to https://mermaid.live
2. Copy any diagram code above (including the ```mermaid wrapper)
3. Paste into the editor
4. Export as PNG/SVG/PDF

### For VS Code:
1. Install "Markdown Preview Mermaid Support" extension
2. Create a .md file
3. Paste diagram code with ```mermaid wrapper
4. Preview the markdown file

### For GitHub/GitLab:
- GitHub natively renders Mermaid in markdown files
- Just commit the .md file with the diagrams

### For Notion:
1. Use /embed block
2. Generate diagram at mermaid.ink:
   https://mermaid.ink/img/BASE64_ENCODED_DIAGRAM

### For Draw.io/Diagrams.net:
1. Install Mermaid plugin
2. Insert Mermaid diagram
3. Paste code without ```mermaid wrapper

### For Documentation Sites (Docusaurus, MkDocs, etc.):
- Most support Mermaid natively via plugins
- Just include code blocks in markdown
