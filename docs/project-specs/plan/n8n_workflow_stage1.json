{
  "name": "SlideRx - Stage 1: Initial Processing",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sliderx-stage1",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-stage1",
      "name": "Webhook: Receive Job",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "notes": "Triggered by AWS Lambda after S3 upload"
    },
    {
      "parameters": {
        "functionCode": "// Extract input from AWS Lambda trigger\nconst body = items[0].json.body || items[0].json;\n\nreturn [{\n  json: {\n    projectId: body.projectId,\n    s3Bucket: body.s3Bucket || 'sliderx-uploads-dev',\n    s3Key: body.s3Key,\n    projectBrief: body.projectBrief || {}\n  }\n}];"
      },
      "id": "parse-input",
      "name": "Parse Lambda Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "download",
        "bucketName": "={{$json.s3Bucket}}",
        "fileKey": "={{$json.s3Key}}",
        "options": {}
      },
      "id": "download-s3",
      "name": "Download PDF from S3",
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "aws": {
          "id": "PLACEHOLDER",
          "name": "AWS Credentials"
        }
      }
    },
    {
      "parameters": {
        "url": "http://pdf-services:8000/extract-text",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-text",
      "name": "Extract Text from PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Prepare AI prompt for initial review\nconst extractedData = items[0].json;\nconst projectData = $('Parse Lambda Input').first().json;\n\nconst systemPrompt = `You are a presentation strategist trained in Nancy Duarte and Dan Roam principles.\n\nYour task is to:\n1. Generate a per-slide summary of the presentation\n2. Identify 2-4 clarifying questions to ask the user before creating the final 3-slide summary\n\nOutput JSON format:\n{\n  \"summary\": [\n    {\"slideNumber\": 1, \"title\": \"slide title\", \"keyPoints\": \"2-3 sentence summary\"},\n    {\"slideNumber\": 2, \"title\": \"slide title\", \"keyPoints\": \"2-3 sentence summary\"}\n  ],\n  \"reviewAndRefine\": {\n    \"questions\": [\n      {\"question\": \"What is your target audience's technical level?\", \"type\": \"text\"},\n      {\"question\": \"What is the desired outcome of this presentation?\", \"type\": \"text\"}\n    ]\n  }\n}`;\n\nconst projectBrief = projectData.projectBrief;\nconst userPrompt = `PRESENTATION CONTENT:\n${extractedData.fullText}\n\nBUSINESS CONTEXT:\nPurpose: ${projectBrief.businessPurpose || 'Not specified'}\nProject Phase: ${projectBrief.projectPhase || 'Not specified'}\nKey Metrics: ${projectBrief.keyMetrics || 'Not specified'}\nCurrent Blockers: ${projectBrief.currentBlockers || 'Not specified'}\n\nPages: ${extractedData.pageCount}\n\nPlease:\n1. Create a per-slide summary (title + 2-3 sentence summary of key points)\n2. Ask 2-4 clarifying questions that would help create a better 3-slide executive summary`;\n\nreturn [{\n  json: {\n    projectId: projectData.projectId,\n    systemPrompt: systemPrompt,\n    userPrompt: userPrompt\n  }\n}];"
      },
      "id": "prepare-stage1-prompt",
      "name": "Prepare Stage 1 Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "HTTP-Referer",
              "value": "https://sliderx.app"
            },
            {
              "name": "X-Title",
              "value": "SlideRx"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "anthropic/claude-sonnet-4"
            },
            {
              "name": "messages",
              "value": "={{[\n  {role: 'system', content: $json.systemPrompt},\n  {role: 'user', content: $json.userPrompt}\n]}}"
            },
            {
              "name": "max_tokens",
              "value": "3000"
            },
            {
              "name": "temperature",
              "value": "0.7"
            }
          ]
        },
        "options": {
          "timeout": 90000
        }
      },
      "id": "call-ai-stage1",
      "name": "Call AI for Review",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "PLACEHOLDER",
          "name": "OpenRouter API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Parse AI response\nconst item = items[0].json;\nconst projectId = $('Prepare Stage 1 Prompt').first().json.projectId;\n\ntry {\n  let content = item.choices[0].message.content;\n  \n  // Remove markdown code blocks if present\n  content = content.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n  \n  const parsed = JSON.parse(content);\n  \n  if (!parsed.summary || !parsed.reviewAndRefine) {\n    throw new Error('Missing required fields in AI response');\n  }\n  \n  return [{\n    json: {\n      projectId: projectId,\n      summary: parsed.summary,\n      reviewAndRefine: parsed.reviewAndRefine\n    }\n  }];\n  \n} catch (error) {\n  console.error('Parse error:', error);\n  throw new Error(`Failed to parse AI response: ${error.message}`);\n}"
      },
      "id": "parse-stage1-response",
      "name": "Parse AI Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "url": "https://f9yntj41f4.execute-api.eu-central-1.amazonaws.com/dev/projects/{{$json.projectId}}/review",
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "summary",
              "value": "={{JSON.stringify($json.summary)}}"
            },
            {
              "name": "reviewAndRefine",
              "value": "={{JSON.stringify($json.reviewAndRefine)}}"
            },
            {
              "name": "status",
              "value": "needs_review"
            }
          ]
        },
        "options": {}
      },
      "id": "update-api",
      "name": "POST to API (needs_review)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 300],
      "notes": "Updates DynamoDB via API Gateway"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{{\n  projectId: $('Parse AI Response').first().json.projectId,\n  status: 'needs_review',\n  message: 'Initial processing complete. Awaiting user answers.'\n}}}",
        "options": {}
      },
      "id": "respond-stage1",
      "name": "Respond Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300]
    }
  ],
  "connections": {
    "Webhook: Receive Job": {
      "main": [[{"node": "Parse Lambda Input"}]]
    },
    "Parse Lambda Input": {
      "main": [[{"node": "Download PDF from S3"}]]
    },
    "Download PDF from S3": {
      "main": [[{"node": "Extract Text from PDF"}]]
    },
    "Extract Text from PDF": {
      "main": [[{"node": "Prepare Stage 1 Prompt"}]]
    },
    "Prepare Stage 1 Prompt": {
      "main": [[{"node": "Call AI for Review"}]]
    },
    "Call AI for Review": {
      "main": [[{"node": "Parse AI Response"}]]
    },
    "Parse AI Response": {
      "main": [[{"node": "POST to API (needs_review)"}]]
    },
    "POST to API (needs_review)": {
      "main": [[{"node": "Respond Success"}]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}