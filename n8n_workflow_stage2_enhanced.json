{
  "name": "SlideRx - Stage 2: Final Generation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sliderx-stage2",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-stage2",
      "name": "Webhook: User Answered",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "stage2-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Parse User Answers - Extract complete context\nconst body = $input.item.json.body || $input.item.json;\n\nreturn {\n  projectId: body.projectId,\n  projectBrief: body.projectBrief,\n  reviewAndRefine: body.reviewAndRefine,\n  summary: body.summary,\n  userAnswers: body.userAnswers || body.answers,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "parse-user-answers",
      "name": "Parse User Answers",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validate Stage 2 Input - Check all required context\nconst data = $input.item.json;\n\nconst validation = {\n  hasProjectId: !!data.projectId,\n  hasProjectBrief: !!data.projectBrief && typeof data.projectBrief === 'object',\n  hasReviewAndRefine: !!data.reviewAndRefine && Array.isArray(data.reviewAndRefine.questions),\n  hasSummary: !!data.summary && Array.isArray(data.summary),\n  hasUserAnswers: !!data.userAnswers && Array.isArray(data.userAnswers)\n};\n\nconst isValid = validation.hasProjectId && validation.hasProjectBrief && \n                validation.hasReviewAndRefine && validation.hasSummary && \n                validation.hasUserAnswers;\n\nif (!isValid) {\n  throw new Error(`Stage 2 validation failed: ${JSON.stringify(validation)}`);\n}\n\n// Validate user answers match questions\nconst questionCount = data.reviewAndRefine.questions.length;\nconst answerCount = data.userAnswers.length;\n\nif (questionCount !== answerCount) {\n  throw new Error(`Answer count mismatch: ${answerCount} answers for ${questionCount} questions`);\n}\n\nreturn {\n  ...data,\n  validation,\n  validatedAt: new Date().toISOString()\n};"
      },
      "id": "validate-stage2-input",
      "name": "Validate Stage 2 Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare Final AI Prompt with all context\nconst data = $input.item.json;\n\nconst systemPrompt = `You are a presentation strategist trained in Nancy Duarte and Dan Roam principles.\n\nYour task is to create a final 3-slide executive presentation.\n\nPRINCIPLES:\n1. Decision-first structure (executives start with conclusion)\n2. Visual over verbal (images process 60,000x faster than text)\n3. One idea per slide\n4. No jargon\n5. Specific visual descriptions\n\nOUTPUT FORMAT (JSON):\n{\n  \"slide1\": {\n    \"title\": \"THE PROBLEM\",\n    \"visual\": \"[Specific visual description - e.g., 'Bar chart showing 40% cost increase over 3 years vs industry 15% average']\",\n    \"sentence\": \"[Max 15 words - the core problem statement]\"\n  },\n  \"slide2\": {\n    \"title\": \"THE SOLUTION\",\n    \"visual\": \"[Specific visual description]\",\n    \"sentence\": \"[Max 15 words - the solution]\"\n  },\n  \"slide3\": {\n    \"title\": \"THE ASK\",\n    \"visual\": \"[Specific visual description - e.g., 'Timeline showing $2M investment returning $5M over 18 months']\",\n    \"sentence\": \"[Max 15 words - clear call to action]\"\n  },\n  \"report\": {\n    \"explanations\": [\n      {\n        \"slides\": \"1-4\",\n        \"title\": \"Section name\",\n        \"cut\": \"What was removed\",\n        \"why\": \"Reason for removal\",\n        \"principle\": \"Which presentation principle\",\n        \"location\": \"Deleted/Appendix\"\n      }\n    ]\n  }\n}`;\n\n// Build comprehensive user prompt\nconst brief = data.projectBrief;\nconst qaContext = data.reviewAndRefine.questions.map((q, i) => {\n  return `Q: ${q.question}\\nA: ${data.userAnswers[i] || 'Not answered'}`;\n}).join('\\n\\n');\n\nconst summaryText = data.summary.map(s => \n  `Slide ${s.slideNumber}: ${s.title}\\n${s.keyPoints}`\n).join('\\n\\n');\n\nconst userPrompt = `ORIGINAL PRESENTATION SUMMARY:\n${summaryText}\n\nBUSINESS CONTEXT:\nPurpose: ${brief.businessPurpose}\nProject Phase: ${brief.projectPhase}\nKey Metrics: ${brief.keyMetrics}\nCurrent Blockers: ${brief.currentBlockers}\n\nCLARIFYING Q&A:\n${qaContext}\n\nBased on all this context, create the final 3-slide executive presentation following the JSON format.\nProvide 5-10 specific explanations in the report about what was cut and why.`;\n\nreturn {\n  projectId: data.projectId,\n  systemPrompt: systemPrompt,\n  userPrompt: userPrompt,\n  preparedAt: new Date().toISOString()\n};"
      },
      "id": "prepare-final-prompt",
      "name": "Prepare Final AI Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "api-check",
              "leftValue": "={{ true }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-ai-api-available",
      "name": "Is AI API Available?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "HTTP-Referer",
              "value": "https://sliderx.app"
            },
            {
              "name": "X-Title",
              "value": "SlideRx"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"anthropic/claude-sonnet-4\",\n  \"messages\": [\n    {\"role\": \"system\", \"content\": {{ $json.systemPrompt }}},\n    {\"role\": \"user\", \"content\": {{ $json.userPrompt }}}\n  ],\n  \"max_tokens\": 2500,\n  \"temperature\": 0.7\n}",
        "options": {
          "timeout": 90000,
          "retry": {
            "retry": {
              "maxRetries": 3,
              "retryInterval": 1000
            }
          }
        }
      },
      "id": "call-ai-final-slides",
      "name": "Call AI for Final Slides",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 200],
      "credentials": {
        "openRouterApi": {
          "id": "PLACEHOLDER_OPENROUTER",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse Final Slides Response\nconst item = $input.item.json;\nconst projectId = $('Prepare Final AI Prompt').first().json.projectId;\n\ntry {\n  let content = item.choices[0].message.content;\n  \n  // Remove markdown code blocks\n  content = content.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n  \n  const parsed = JSON.parse(content);\n  \n  if (!parsed.slide1 || !parsed.slide2 || !parsed.slide3) {\n    throw new Error('Missing required slides in AI response');\n  }\n  \n  return {\n    projectId: projectId,\n    slides: parsed,\n    parsedAt: new Date().toISOString()\n  };\n  \n} catch (error) {\n  console.error('Parse error:', error);\n  throw new Error(`Failed to parse AI response: ${error.message}`);\n}"
      },
      "id": "parse-final-slides",
      "name": "Parse Final Slides",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "jsCode": "// Validate Slides Format\nconst data = $input.item.json;\nconst slides = data.slides;\n\n// Validate each slide structure\nconst validateSlide = (slide, num) => {\n  if (!slide.title || !slide.visual || !slide.sentence) {\n    throw new Error(`Slide ${num} missing required fields: title, visual, or sentence`);\n  }\n  if (slide.sentence.split(' ').length > 15) {\n    console.warn(`Slide ${num} sentence exceeds 15 words: ${slide.sentence.split(' ').length} words`);\n  }\n};\n\nvalidateSlide(slides.slide1, 1);\nvalidateSlide(slides.slide2, 2);\nvalidateSlide(slides.slide3, 3);\n\n// Validate report if present\nif (slides.report && slides.report.explanations) {\n  if (!Array.isArray(slides.report.explanations) || slides.report.explanations.length === 0) {\n    console.warn('Report explanations empty or invalid');\n  }\n}\n\nreturn {\n  ...data,\n  validated: true,\n  validatedAt: new Date().toISOString()\n};"
      },
      "id": "validate-slides-format",
      "name": "Validate Slides Format",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://pdf-services:8000/generate-pdf",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"projectId\": \"{{ $json.projectId }}\",\n  \"slide1\": {{ $json.slides.slide1 }},\n  \"slide2\": {{ $json.slides.slide2 }},\n  \"slide3\": {{ $json.slides.slide3 }}\n}",
        "options": {
          "timeout": 60000,
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "generate-pdf",
      "name": "Generate Final PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "sliderx-generated-dev",
        "fileName": "={{ $('Validate Slides Format').first().json.projectId }}/presentation-condensed.pdf",
        "binaryData": true,
        "options": {
          "acl": "private"
        }
      },
      "id": "upload-to-s3",
      "name": "Upload PDF to S3",
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 1,
      "position": [2220, 200],
      "credentials": {
        "aws": {
          "id": "PLACEHOLDER_AWS",
          "name": "AWS S3 SlideRx"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare Final Response Data\nconst projectId = $('Validate Slides Format').first().json.projectId;\nconst slides = $('Validate Slides Format').first().json.slides;\nconst s3Response = $input.item.json;\n\n// Construct S3 URL\nconst downloadUrl = `https://sliderx-generated-dev.s3.eu-central-1.amazonaws.com/${projectId}/presentation-condensed.pdf`;\n\nreturn {\n  projectId: projectId,\n  downloadUrl: downloadUrl,\n  slides: slides,\n  generatedAt: new Date().toISOString()\n};"
      },
      "id": "prepare-final-response",
      "name": "Prepare Final Response Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://f9yntj41f4.execute-api.eu-central-1.amazonaws.com/dev/projects/{{ $json.projectId }}/complete",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"downloadUrl\": \"{{ $json.downloadUrl }}\",\n  \"slides\": {{ $json.slides }},\n  \"status\": \"ready\"\n}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "post-to-api-complete",
      "name": "POST to API /complete",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2660, 200]
    },
    {
      "parameters": {
        "jsCode": "// Log Success Metrics for Stage 2\nconst data = $input.item.json;\nconst startTime = $('Parse User Answers').first().json.timestamp;\nconst endTime = new Date().toISOString();\nconst duration = new Date(endTime) - new Date(startTime);\n\nconst finalData = $('Prepare Final Response Data').first().json;\n\nconsole.log('SUCCESS - Stage 2 Completed:', {\n  projectId: finalData.projectId,\n  duration: `${duration}ms`,\n  downloadUrl: finalData.downloadUrl,\n  slidesGenerated: 3,\n  timestamp: endTime\n});\n\nreturn {\n  projectId: finalData.projectId,\n  downloadUrl: finalData.downloadUrl,\n  slides: finalData.slides,\n  status: 'success',\n  duration,\n  timestamp: endTime,\n  apiResponse: data\n};"
      },
      "id": "log-stage2-success",
      "name": "Log Stage 2 Success Metrics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2880, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "post-success-check",
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": "200",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-post-success",
      "name": "API Post Successful?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [3100, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"projectId\": \"{{ $('Log Stage 2 Success Metrics').first().json.projectId }}\",\n  \"status\": \"ready\",\n  \"downloadUrl\": \"{{ $('Log Stage 2 Success Metrics').first().json.downloadUrl }}\",\n  \"message\": \"Final presentation generated successfully\",\n  \"duration\": {{ $('Log Stage 2 Success Metrics').first().json.duration }}\n}",
        "options": {}
      },
      "id": "send-success-response",
      "name": "Send Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [3320, 120]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"projectId\": \"{{ $('Log Stage 2 Success Metrics').first().json.projectId }}\",\n  \"status\": \"error\",\n  \"message\": \"Failed to post completion status to API Gateway\",\n  \"error\": \"API Gateway POST failed\",\n  \"retryInfo\": {\n    \"canRetry\": true,\n    \"retryAfter\": 5000\n  }\n}",
        "responseCode": 500,
        "options": {}
      },
      "id": "send-post-error",
      "name": "Send API Post Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [3320, 280]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"projectId\": \"{{ $('Prepare Final AI Prompt').first().json.projectId }}\",\n  \"status\": \"error\",\n  \"message\": \"AI API is currently unavailable for final generation\",\n  \"error\": \"OpenRouter API unavailable or rate limited\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "responseCode": 503,
        "options": {}
      },
      "id": "send-ai-error",
      "name": "Send AI API Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1340, 400]
    }
  ],
  "connections": {
    "Webhook: User Answered": {
      "main": [[{"node": "Parse User Answers", "type": "main", "index": 0}]]
    },
    "Parse User Answers": {
      "main": [[{"node": "Validate Stage 2 Input", "type": "main", "index": 0}]]
    },
    "Validate Stage 2 Input": {
      "main": [[{"node": "Prepare Final AI Prompt", "type": "main", "index": 0}]]
    },
    "Prepare Final AI Prompt": {
      "main": [[{"node": "Is AI API Available?", "type": "main", "index": 0}]]
    },
    "Is AI API Available?": {
      "main": [
        [{"node": "Call AI for Final Slides", "type": "main", "index": 0}],
        [{"node": "Send AI API Error", "type": "main", "index": 0}]
      ]
    },
    "Call AI for Final Slides": {
      "main": [[{"node": "Parse Final Slides", "type": "main", "index": 0}]]
    },
    "Parse Final Slides": {
      "main": [[{"node": "Validate Slides Format", "type": "main", "index": 0}]]
    },
    "Validate Slides Format": {
      "main": [[{"node": "Generate Final PDF", "type": "main", "index": 0}]]
    },
    "Generate Final PDF": {
      "main": [[{"node": "Upload PDF to S3", "type": "main", "index": 0}]]
    },
    "Upload PDF to S3": {
      "main": [[{"node": "Prepare Final Response Data", "type": "main", "index": 0}]]
    },
    "Prepare Final Response Data": {
      "main": [[{"node": "POST to API /complete", "type": "main", "index": 0}]]
    },
    "POST to API /complete": {
      "main": [[{"node": "Log Stage 2 Success Metrics", "type": "main", "index": 0}]]
    },
    "Log Stage 2 Success Metrics": {
      "main": [[{"node": "API Post Successful?", "type": "main", "index": 0}]]
    },
    "API Post Successful?": {
      "main": [
        [{"node": "Send Success Response", "type": "main", "index": 0}],
        [{"node": "Send API Post Error", "type": "main", "index": 0}]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-09T12:00:00.000Z",
  "versionId": "1"
}
