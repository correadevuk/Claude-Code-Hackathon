{
  "name": "SlideRx Stage 1 - PDF Extraction & Review Questions",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sliderx-stage1",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ],
      "webhookId": "sliderx-stage1"
    },
    {
      "parameters": {
        "functionCode": "// Parse incoming Lambda payload\nconst body = $input.item.json.body;\n\n// Extract parameters\nconst projectId = body.projectId;\nconst s3Bucket = body.s3Bucket || 'sliderx-uploads-dev';\nconst s3Key = body.fileKey;  // Victor's update: use fileKey instead of s3Key\nconst projectBrief = body.projectBrief;\n\n// Extract userId from s3Key path: uploads/{userId}/{projectId}/...\nconst pathParts = s3Key.split('/');\nconst userId = pathParts[1];\n\nreturn {\n  json: {\n    projectId,\n    userId,\n    s3Bucket,\n    s3Key,\n    projectBrief,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "parse-input",
      "name": "Parse Lambda Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "bucketName": "={{$json.s3Bucket}}",
        "fileKey": "={{$json.s3Key}}",
        "options": {}
      },
      "id": "s3-download",
      "name": "S3 Download PDF",
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 1,
      "position": [
        650,
        300
      ],
      "credentials": {
        "aws": {
          "id": "1",
          "name": "AWS S3 SlideRx"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Convert PDF binary to base64 for Claude API with Vision\nconst projectBrief = $node['Parse Lambda Payload'].json.projectBrief;\nconst projectId = $node['Parse Lambda Payload'].json.projectId;\nconst userId = $node['Parse Lambda Payload'].json.userId;\n\n// Get the binary data (PDF file from S3)\nconst binaryPropertyName = Object.keys($input.item.binary)[0];\nconst binaryData = $input.item.binary[binaryPropertyName];\n\n// Convert binary buffer to base64\n// N8N stores binary as Buffer, need to convert to base64 string\nlet base64Pdf;\nif (binaryData.data) {\n  // If data property exists, use it\n  base64Pdf = binaryData.data;\n} else if (Buffer.isBuffer(binaryData)) {\n  // If it's a Buffer directly, convert to base64\n  base64Pdf = binaryData.toString('base64');\n} else {\n  // Fallback: try to get from the binary object itself\n  const buffer = await this.helpers.getBinaryDataBuffer(0, binaryPropertyName);\n  base64Pdf = buffer.toString('base64');\n}\n\nconst mimeType = binaryData.mimeType || 'application/pdf';\nconst fileName = binaryData.fileName || 'presentation.pdf';\n\nreturn {\n  json: {\n    projectId,\n    userId,\n    projectBrief,\n    pdfBase64: base64Pdf,\n    mimeType: mimeType,\n    fileName: fileName\n  }\n};"
      },
      "id": "convert-pdf-base64",
      "name": "Convert PDF to Base64",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        750,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.openRouterApiKey}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "options": {
          "timeout": 120000
        },
        "jsonBody": "={{ JSON.stringify({ model: 'anthropic/claude-3-5-sonnet', max_tokens: 4096, messages: [{ role: 'user', content: [{ type: 'image', source: { type: 'base64', media_type: $json.mimeType, data: $json.pdfBase64 } }, { type: 'text', text: 'You are analyzing a business presentation PDF. Analyze both text AND visual elements (charts, graphs, images, diagrams).\\n\\nBusiness Context:\\n- Success Metric: ' + $json.projectBrief.successMetric + '\\n- Industry: ' + $json.projectBrief.industry + '\\n- Problem Solved: ' + $json.projectBrief.problemSolved + '\\n\\nFor each slide, provide:\\n1. Slide title\\n2. Key text points (bullets)\\n3. Visual description (describe any charts, graphs, images, or diagrams)\\n\\nProvide output in this JSON format:\\n{\\n  \"slides\": [\\n    {\\n      \"index\": 1,\\n      \"title\": \"Slide Title\",\\n      \"bullets\": [\"Key point 1\", \"Key point 2\", \"Key point 3\"],\\n      \"visualDescription\": \"Bar chart showing 300% revenue growth, blue gradient background\"\\n    }\\n  ]\\n}\\n\\nAnalyze each slide carefully, paying special attention to visual elements like charts and graphs.' }] }] }) }}"
      },
      "id": "ai-analysis",
      "name": "AI Analysis - OpenRouter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        950,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "2",
          "name": "OpenRouter API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Parse AI response and format for API callback\nconst aiResponse = $input.item.json;\nconst userId = $node['Parse Lambda Payload'].json.userId;\nconst projectId = $node['Parse Lambda Payload'].json.projectId;\n\n// Extract summary from AI response\nlet summary;\ntry {\n  const content = aiResponse.choices[0].message.content;\n  // Try to parse as JSON first\n  const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    summary = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in response');\n  }\n} catch (error) {\n  // Fallback: create basic summary structure\n  summary = {\n    slides: [\n      {\n        index: 1,\n        title: 'Summary Not Available',\n        bullets: ['AI analysis failed to parse', 'Please retry']\n      }\n    ]\n  };\n}\n\n// Define the 3 review questions (fixed structure from Postman)\nconst reviewAndRefine = [\n  {\n    id: 'targetAudience',\n    type: 'select',\n    label: 'Who is this presentation primarily aimed at?',\n    options: [\n      'Investors',\n      'Potential customers',\n      'Internal leadership',\n      'Strategic partners'\n    ],\n    required: true,\n    userAnswer: ''\n  },\n  {\n    id: 'coreMessage',\n    type: 'longText',\n    label: 'What is the key message or takeaway you want the audience to remember?',\n    required: true,\n    userAnswer: ''\n  },\n  {\n    id: 'businessGoal',\n    type: 'select',\n    label: 'What best describes your main business goal for this presentation?',\n    options: [\n      'Fundraising / attracting investors',\n      'Product launch or marketing',\n      'Internal alignment and strategy',\n      'Client acquisition or sales enablement'\n    ],\n    required: true,\n    userAnswer: ''\n  }\n];\n\nreturn {\n  json: {\n    projectId,\n    userId,\n    summary,\n    reviewAndRefine\n  }\n};"
      },
      "id": "format-callback",
      "name": "Format API Callback",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1150,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://f9yntj41f4.execute-api.eu-central-1.amazonaws.com/dev/projects/{{$json.projectId}}/ai/callback",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-user-id",
              "value": "={{$json.userId}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{JSON.stringify({\n  userId: $json.userId,\n  summary: $json.summary,\n  reviewAndRefine: $json.reviewAndRefine\n})}}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "api-callback",
      "name": "POST to API Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1350,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, projectId: $node['Parse Lambda Payload'].json.projectId, message: 'Stage 1 completed successfully', status: 'needs_review' } }}",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Webhook Response - Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1550,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.error}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "check-s3-error",
      "name": "Check S3 Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        650,
        500
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.error}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "check-extract-error",
      "name": "Check Extract Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        850,
        500
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.error}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "check-ai-error",
      "name": "Check AI Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1250,
        500
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "functionCode": "// Log error and format error response\nconst errorNode = $input.item.json;\nconst projectId = $node['Parse Lambda Payload']?.json?.projectId || 'unknown';\n\nconst errorMessage = errorNode.error?.message || errorNode.message || 'Unknown error';\nconst errorStep = $node.name;\n\nconsole.error(`Stage 1 Error at ${errorStep}:`, errorMessage);\n\nreturn {\n  json: {\n    success: false,\n    projectId,\n    error: errorMessage,\n    failedAt: errorStep,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "handle-error",
      "name": "Handle Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1050,
        600
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "responseCode": 500,
        "options": {}
      },
      "id": "webhook-error-response",
      "name": "Webhook Response - Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1250,
        600
      ]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Lambda Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Lambda Payload": {
      "main": [
        [
          {
            "node": "S3 Download PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S3 Download PDF": {
      "main": [
        [
          {
            "node": "Convert PDF to Base64",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check S3 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analysis - OpenRouter": {
      "main": [
        [
          {
            "node": "Format API Callback",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check AI Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format API Callback": {
      "main": [
        [
          {
            "node": "POST to API Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST to API Callback": {
      "main": [
        [
          {
            "node": "Webhook Response - Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check S3 Error": {
      "main": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Extract Error": {
      "main": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check AI Error": {
      "main": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Webhook Response - Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert PDF to Base64": {
      "main": [
        [
          {
            "node": "AI Analysis - OpenRouter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-01-10T00:00:00.000Z",
  "versionId": "1"
}