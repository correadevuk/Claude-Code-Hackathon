[{"createdAt":"2025-10-10T13:52:53.898Z","updatedAt":"2025-10-10T19:03:08.000Z","id":"2uKxj5bPbNVuY98q","name":"SlideRx Stage 1 - PDF Extraction & Review Questions","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"sliderx-stage1","responseMode":"responseNode","options":{}},"id":"31261d7b-64e3-4e15-8c36-ba54314bde3d","name":"Webhook Trigger","type":"n8n-nodes-base.webhook","typeVersion":1,"position":[-768,16],"webhookId":"sliderx-stage1"},{"parameters":{"functionCode":"// Parse incoming Lambda payload\nconst body = $input.item.json.body;\n\n// Extract parameters\nconst projectId = body.projectId;\nconst s3Bucket = body.s3Bucket || 'sliderx-uploads-dev';\nconst s3Key = body.fileKey;  // Victor's update: use fileKey instead of s3Key\nconst projectBrief = body.projectBrief;\n\n// Extract userId from s3Key path: uploads/{userId}/{projectId}/...\nconst pathParts = s3Key.split('/');\nconst userId = pathParts[1];\n\nreturn {\n  json: {\n    projectId,\n    userId,\n    s3Bucket,\n    s3Key,\n    projectBrief,\n    timestamp: new Date().toISOString()\n  }\n};"},"id":"93fb4aad-e2bd-482f-af05-eaa43fdd460c","name":"Parse Lambda Payload","type":"n8n-nodes-base.function","typeVersion":1,"position":[-560,16]},{"parameters":{"bucketName":"={{$json.s3Bucket}}","fileKey":"={{$json.s3Key}}"},"id":"92860374-75fb-4f4a-9cf2-c8257a3339e3","name":"S3 Download PDF","type":"n8n-nodes-base.awsS3","typeVersion":1,"position":[-368,16],"credentials":{"aws":{"id":"b908eUeFHvhuq0qo","name":"AWS S3 SlideRx"}}},{"parameters":{"functionCode":"// Convert PDF binary to base64 for Claude API with Vision\nconst projectBrief = $node['Parse Lambda Payload'].json.projectBrief;\nconst projectId = $node['Parse Lambda Payload'].json.projectId;\nconst userId = $node['Parse Lambda Payload'].json.userId;\n\n// Get the binary data (PDF file from S3)\nconst binaryPropertyName = Object.keys($input.item.binary)[0];\nconst binaryData = $input.item.binary[binaryPropertyName];\n\n// Convert binary buffer to base64\n// N8N stores binary as Buffer, need to convert to base64 string\nlet base64Pdf;\nif (binaryData.data) {\n  // If data property exists, use it\n  base64Pdf = binaryData.data;\n} else if (Buffer.isBuffer(binaryData)) {\n  // If it's a Buffer directly, convert to base64\n  base64Pdf = binaryData.toString('base64');\n} else {\n  // Fallback: try to get from the binary object itself\n  const buffer = await this.helpers.getBinaryDataBuffer(0, binaryPropertyName);\n  base64Pdf = buffer.toString('base64');\n}\n\nconst mimeType = binaryData.mimeType || 'application/pdf';\nconst fileName = binaryData.fileName || 'presentation.pdf';\n\nreturn {\n  json: {\n    projectId,\n    userId,\n    projectBrief,\n    pdfBase64: base64Pdf,\n    mimeType: mimeType,\n    fileName: fileName\n  }\n};"},"id":"a762bbad-a221-4fbf-b306-7d5f44643465","name":"Convert PDF to Base64","type":"n8n-nodes-base.function","typeVersion":1,"position":[-160,16]},{"parameters":{"functionCode":"// Prepare AI API request with PDF for OpenRouter\n// OpenRouter requires a different format than Anthropic's direct API\nconst inputData = $input.item.json;\nconst pdfBase64 = inputData.pdfBase64;\nconst projectBrief = inputData.projectBrief;\nconst projectId = inputData.projectId;\nconst userId = inputData.userId;\nconst fileName = inputData.fileName || 'presentation.pdf';\n\n// Debug: Log data presence\nconsole.log('DEBUG - Prepare AI Request (OpenRouter Format):');\nconsole.log('- pdfBase64 length:', pdfBase64 ? pdfBase64.length : 'MISSING');\nconsole.log('- pdfBase64 start:', pdfBase64 ? pdfBase64.substring(0, 50) : 'MISSING');\nconsole.log('- fileName:', fileName);\nconsole.log('- projectId:', projectId);\nconsole.log('- userId:', userId);\n\nif (!pdfBase64) {\n  throw new Error('pdfBase64 is missing from input data');\n}\n\n// OpenRouter requires Data URL format: data:application/pdf;base64,<base64-data>\nconst pdfDataUrl = `data:application/pdf;base64,${pdfBase64}`;\n\n// Build request body in OpenRouter's format\n// Reference: https://openrouter.ai/docs/features/multimodal/pdfs\nconst requestBody = {\n  model: \"anthropic/claude-sonnet-4.5\",\n  max_tokens: 4096,\n  messages: [{\n    role: \"user\",\n    content: [\n      {\n        type: \"file\",  // OpenRouter uses \"file\", not \"document\"\n        file: {\n          filename: fileName,\n          file_data: pdfDataUrl  // Data URL format required\n        }\n      },\n      {\n        type: \"text\",\n        text: `You are analyzing a business presentation PDF. Analyze both text AND visual elements (charts, graphs, images, diagrams).\n\nBusiness Context:\n- Project Phase: ${projectBrief.projectPhase}\n- Key Metrics: ${projectBrief.keyMetrics}\n- Current Blockers: ${projectBrief.currentBlockers}\n\nFor each slide, provide:\n1. Slide title\n2. Key text points (bullets)\n3. Visual description (describe any charts, graphs, images, or diagrams)\n\nProvide output in this JSON format:\n{\n  \"slides\": [\n    {\n      \"index\": 1,\n      \"title\": \"Slide Title\",\n      \"bullets\": [\"Key point 1\", \"Key point 2\", \"Key point 3\"],\n      \"visualDescription\": \"Bar chart showing 300% revenue growth, blue gradient background\"\n    }\n  ]\n}\n\nAnalyze each slide carefully, paying special attention to visual elements like charts and graphs.`\n      }\n    ]\n  }]\n};\n\n// Debug: Log request structure\nconsole.log('- Request body model:', requestBody.model);\nconsole.log('- Content type:', requestBody.messages[0].content[0].type);\nconsole.log('- Filename:', requestBody.messages[0].content[0].file.filename);\nconsole.log('- Data URL prefix:', requestBody.messages[0].content[0].file.file_data.substring(0, 50));\n\nreturn {\n  json: {\n    projectId,\n    userId,\n    requestBody: requestBody\n  }\n};"},"id":"ddf4de27-ae00-45e2-806e-ebb0c8c6c746","name":"Prepare AI Request","type":"n8n-nodes-base.function","typeVersion":1,"position":[48,16]},{"parameters":{"method":"POST","url":"https://openrouter.ai/api/v1/chat/completions","authentication":"predefinedCredentialType","nodeCredentialType":"openRouterApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"Bearer {{$credentials.openRouterApiKey}}"},{"name":"Content-Type","value":"application/json"},{"name":"HTTP-Referer","value":"https://sliderx.app"},{"name":"X-Title","value":"SlideRx N8N Workflow"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify($json.requestBody) }}","options":{"timeout":120000}},"id":"cea6286c-214e-4b50-9715-416aa05a6825","name":"AI Analysis - OpenRouter","type":"n8n-nodes-base.httpRequest","typeVersion":3,"position":[240,16],"credentials":{"openRouterApi":{"id":"Fb6D2B2ICq74Z4Fo","name":"OpenRouter account"}}},{"parameters":{"functionCode":"// Parse AI response and format for API callback\nconst aiResponse = $input.item.json;\nconst userId = $node['Parse Lambda Payload'].json.userId;\nconst projectId = $node['Parse Lambda Payload'].json.projectId;\n\n// Extract summary from AI response\nlet summary;\ntry {\n  const content = aiResponse.choices[0].message.content;\n  // Try to parse as JSON first\n  const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    summary = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in response');\n  }\n} catch (error) {\n  // Fallback: create basic summary structure\n  summary = {\n    slides: [\n      {\n        index: 1,\n        title: 'Summary Not Available',\n        bullets: ['AI analysis failed to parse', 'Please retry']\n      }\n    ]\n  };\n}\n\n// Define the 3 review questions (fixed structure from Postman)\nconst reviewAndRefine = [\n  {\n    id: 'targetAudience',\n    type: 'select',\n    label: 'Who is this presentation primarily aimed at?',\n    options: [\n      'Investors',\n      'Potential customers',\n      'Internal leadership',\n      'Strategic partners'\n    ],\n    required: true,\n    userAnswer: ''\n  },\n  {\n    id: 'coreMessage',\n    type: 'longText',\n    label: 'What is the key message or takeaway you want the audience to remember?',\n    required: true,\n    userAnswer: ''\n  },\n  {\n    id: 'businessGoal',\n    type: 'select',\n    label: 'What best describes your main business goal for this presentation?',\n    options: [\n      'Fundraising / attracting investors',\n      'Product launch or marketing',\n      'Internal alignment and strategy',\n      'Client acquisition or sales enablement'\n    ],\n    required: true,\n    userAnswer: ''\n  }\n];\n\nreturn {\n  json: {\n    projectId,\n    userId,\n    summary,\n    reviewAndRefine\n  }\n};"},"id":"9b7e2e26-723c-4495-ae2b-8ac1d72832f1","name":"Format API Callback","type":"n8n-nodes-base.function","typeVersion":1,"position":[448,16]},{"parameters":{"method":"POST","url":"=https://f9yntj41f4.execute-api.eu-central-1.amazonaws.com/dev/projects/{{$json.projectId}}/ai/callback","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"x-user-id","value":"={{$json.userId}}"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{JSON.stringify({\n  userId: $json.userId,\n  summary: $json.summary,\n  reviewAndRefine: $json.reviewAndRefine\n})}}","options":{"timeout":30000}},"id":"cd8941f9-e393-49ab-a314-d6147a1e5311","name":"POST to API Callback","type":"n8n-nodes-base.httpRequest","typeVersion":3,"position":[640,16]},{"parameters":{"respondWith":"json","responseBody":"={{ { success: true, projectId: $node['Parse Lambda Payload'].json.projectId, message: 'Stage 1 completed successfully', status: 'needs_review' } }}","options":{}},"id":"666d114e-35a6-4116-ae14-87167d540bb2","name":"Webhook Response - Success","type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[848,16]},{"parameters":{"conditions":{"string":[{"value1":"={{$json.error}}","operation":"isNotEmpty"}]}},"id":"5c8054b7-9ddf-4fee-ad0d-948139746696","name":"Check S3 Error","type":"n8n-nodes-base.if","typeVersion":1,"position":[-368,224],"alwaysOutputData":false},{"parameters":{"conditions":{"string":[{"value1":"={{$json.error}}","operation":"isNotEmpty"}]}},"id":"756b9ba8-8146-4b90-ab5e-bbb13ba491ab","name":"Check Extract Error","type":"n8n-nodes-base.if","typeVersion":1,"position":[48,224],"alwaysOutputData":false},{"parameters":{"conditions":{"string":[{"value1":"={{$json.error}}","operation":"isNotEmpty"}]}},"id":"a6e389f0-5e02-48b9-843b-af34b4f892d4","name":"Check AI Error","type":"n8n-nodes-base.if","typeVersion":1,"position":[448,224],"alwaysOutputData":false},{"parameters":{"functionCode":"// Log error and format error response\nconst errorNode = $input.item.json;\nconst projectId = $node['Parse Lambda Payload']?.json?.projectId || 'unknown';\n\nconst errorMessage = errorNode.error?.message || errorNode.message || 'Unknown error';\nconst errorStep = $node.name;\n\nconsole.error(`Stage 1 Error at ${errorStep}:`, errorMessage);\n\nreturn {\n  json: {\n    success: false,\n    projectId,\n    error: errorMessage,\n    failedAt: errorStep,\n    timestamp: new Date().toISOString()\n  }\n};"},"id":"54fa53d5-a0bc-468a-89ce-28ffbd439170","name":"Handle Error","type":"n8n-nodes-base.function","typeVersion":1,"position":[240,320]},{"parameters":{"respondWith":"json","responseBody":"={{$json}}","options":{}},"id":"0372f102-7e50-480c-9c35-409cdd7f7f6d","name":"Webhook Response - Error","type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[448,320]}],"connections":{"Webhook Trigger":{"main":[[{"node":"Parse Lambda Payload","type":"main","index":0}]]},"Parse Lambda Payload":{"main":[[{"node":"S3 Download PDF","type":"main","index":0}]]},"S3 Download PDF":{"main":[[{"node":"Convert PDF to Base64","type":"main","index":0},{"node":"Check S3 Error","type":"main","index":0}]]},"AI Analysis - OpenRouter":{"main":[[{"node":"Format API Callback","type":"main","index":0},{"node":"Check AI Error","type":"main","index":0}]]},"Format API Callback":{"main":[[{"node":"POST to API Callback","type":"main","index":0}]]},"POST to API Callback":{"main":[[{"node":"Webhook Response - Success","type":"main","index":0}]]},"Check S3 Error":{"main":[[{"node":"Handle Error","type":"main","index":0}]]},"Check Extract Error":{"main":[[{"node":"Handle Error","type":"main","index":0}]]},"Check AI Error":{"main":[[{"node":"Handle Error","type":"main","index":0}]]},"Handle Error":{"main":[[{"node":"Webhook Response - Error","type":"main","index":0}]]},"Convert PDF to Base64":{"main":[[{"node":"Prepare AI Request","type":"main","index":0}]]},"Prepare AI Request":{"main":[[{"node":"AI Analysis - OpenRouter","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","availableInMCP":false},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"e7711457-ae91-494d-8916-6098967be5f0","triggerCount":1,"tags":[],"shared":[{"createdAt":"2025-10-10T13:52:53.902Z","updatedAt":"2025-10-10T13:52:53.902Z","role":"workflow:owner","workflowId":"2uKxj5bPbNVuY98q","projectId":"NPdtZYmJDo2KsnuU","project":{"createdAt":"2025-10-08T18:37:11.827Z","updatedAt":"2025-10-08T18:39:04.073Z","id":"NPdtZYmJDo2KsnuU","name":"Talab Elmharek <talab74@gmail.com>","type":"personal","icon":null,"description":null}}]}]