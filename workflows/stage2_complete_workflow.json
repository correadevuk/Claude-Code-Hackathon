[{"createdAt":"2025-10-10T09:24:27.627Z","updatedAt":"2025-10-13T18:39:28.000Z","id":"OaoFNZqV0G03T5Z4","name":"SlideRx Stage 2 - Final Presentation Generation","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"sliderx-stage2","options":{}},"id":"2a018260-d7be-4b77-b532-a8b565fe900d","name":"Webhook Trigger Stage 2","type":"n8n-nodes-base.webhook","typeVersion":1,"position":[-848,-32],"webhookId":"sliderx-stage2"},{"parameters":{"functionCode":"// Parse incoming API payload with full context\nconst body = $input.item.json.body;\n\n// Extract all required data\nconst projectId = body.projectId;\nconst userId = body.userId;\nconst s3Key = body.s3Key;\nconst projectBrief = body.projectBrief || {};\nconst summary = body.summary || {};\nconst reviewAndRefine = body.reviewAndRefine || [];\n\n// Extract user answers from reviewAndRefine with validation\nlet targetAudience = '';\nlet coreMessage = '';\nlet businessGoal = '';\n\nif (Array.isArray(reviewAndRefine)) {\n  const targetAudQ = reviewAndRefine.find(q => q.id === 'targetAudience');\n  const coreMessageQ = reviewAndRefine.find(q => q.id === 'coreMessage');\n  const businessGoalQ = reviewAndRefine.find(q => q.id === 'businessGoal');\n  \n  targetAudience = targetAudQ?.userAnswer || '';\n  coreMessage = coreMessageQ?.userAnswer || '';\n  businessGoal = businessGoalQ?.userAnswer || '';\n}\n\nreturn {\n  json: {\n    projectId,\n    userId,\n    s3Key,\n    projectBrief,\n    summary,\n    reviewAndRefine: {\n      targetAudience,\n      coreMessage,\n      businessGoal\n    },\n    timestamp: new Date().toISOString()\n  }\n};"},"id":"2e0e45f1-77fa-42c1-8f32-55f141ef1f17","name":"Parse API Payload","type":"n8n-nodes-base.function","typeVersion":1,"position":[-656,-32]},{"parameters":{"functionCode":"// Prepare comprehensive prompt for AI to generate 3-slide presentation\nconst data = $input.item.json;\n\n// Build context from all available data\nconst slideSummaries = data.summary.slides\n  .map(s => `Slide ${s.index}: ${s.title}\\n${s.bullets.join('\\n')}`)\n  .join('\\n\\n');\n\nconst prompt = `You are creating a concise 3-slide executive summary presentation.\n\n# ORIGINAL PRESENTATION SUMMARY\n${slideSummaries}\n\n# BUSINESS CONTEXT\n- Success Metric: ${data.projectBrief.successMetric}\n- Industry: ${data.projectBrief.industry}\n- Problem Solved: ${data.projectBrief.problemSolved}\n\n# USER GUIDANCE\n- Target Audience: ${data.reviewAndRefine.targetAudience}\n- Core Message: ${data.reviewAndRefine.coreMessage}\n- Business Goal: ${data.reviewAndRefine.businessGoal}\n\n# TASK\nCreate exactly 3 slides following this structure:\n\n**Slide 1: THE PROBLEM**\n- Title: Exactly \"THE PROBLEM\"\n- Visual: A brief description of what visual element should appear (diagram, chart, icon, etc.)\n- Sentence: One powerful sentence that captures the core problem\n\n**Slide 2: THE SOLUTION**\n- Title: Exactly \"THE SOLUTION\"\n- Visual: A brief description of what visual element should appear\n- Sentence: One powerful sentence that captures your solution\n\n**Slide 3: THE ASK**\n- Title: Exactly \"THE ASK\"\n- Visual: A brief description of what visual element should appear\n- Sentence: One powerful sentence that states what you're asking for\n\n# OUTPUT FORMAT (JSON only)\n{\n  \"slide1\": {\n    \"title\": \"THE PROBLEM\",\n    \"visual\": \"Description of visual\",\n    \"sentence\": \"One impactful sentence\"\n  },\n  \"slide2\": {\n    \"title\": \"THE SOLUTION\",\n    \"visual\": \"Description of visual\",\n    \"sentence\": \"One impactful sentence\"\n  },\n  \"slide3\": {\n    \"title\": \"THE ASK\",\n    \"visual\": \"Description of visual\",\n    \"sentence\": \"One impactful sentence\"\n  }\n}\n\nProvide ONLY the JSON output, no other text.`;\n\nreturn {\n  json: {\n    projectId: data.projectId,\n    userId: data.userId,\n    prompt,\n    context: data\n  }\n};"},"id":"97404f9d-e9e3-4650-95e0-98feda8e64aa","name":"Prepare AI Prompt","type":"n8n-nodes-base.function","typeVersion":1,"position":[-448,-32]},{"parameters":{"method":"POST","url":"https://openrouter.ai/api/v1/chat/completions","authentication":"predefinedCredentialType","nodeCredentialType":"openRouterApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"Bearer {{$credentials.openRouterApiKey}}"},{"name":"Content-Type","value":"application/json"},{"name":"HTTP-Referer","value":"https://sliderx.app"},{"name":"X-Title","value":"SlideRx N8N Workflow"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ JSON.stringify({\n  model: 'anthropic/claude-sonnet-4.5',\n  max_tokens: 4096,\n  temperature: 0.7,\n  messages: [{\n    role: 'user',\n    content: $json.prompt\n  }]\n}) }}","options":{"timeout":120000}},"id":"333f54cc-0a63-45d1-b6ed-6317a1bc3881","name":"AI Generate 3 Slides","type":"n8n-nodes-base.httpRequest","typeVersion":3,"position":[-256,-32],"credentials":{"openRouterApi":{"id":"Fb6D2B2ICq74Z4Fo","name":"OpenRouter account"}}},{"parameters":{"functionCode":"// Parse AI response and format for PDF generation\nconst aiResponse = $input.item.json;\nconst projectId = $node['Parse API Payload'].json.projectId;\n\nlet slides;\ntry {\n  const content = aiResponse.choices[0].message.content;\n  // Extract JSON from response\n  const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    slides = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in AI response');\n  }\n  \n  // Validate structure\n  if (!slides.slide1 || !slides.slide2 || !slides.slide3) {\n    throw new Error('Missing slides in AI response');\n  }\n  \n  // Ensure titles are correct\n  slides.slide1.title = 'THE PROBLEM';\n  slides.slide2.title = 'THE SOLUTION';\n  slides.slide3.title = 'THE ASK';\n  \n} catch (error) {\n  // Fallback slides if parsing fails\n  console.error('AI parsing error:', error.message);\n  slides = {\n    slide1: {\n      title: 'THE PROBLEM',\n      visual: 'Error generating content',\n      sentence: 'Please retry the generation process.'\n    },\n    slide2: {\n      title: 'THE SOLUTION',\n      visual: 'Error generating content',\n      sentence: 'Please retry the generation process.'\n    },\n    slide3: {\n      title: 'THE ASK',\n      visual: 'Error generating content',\n      sentence: 'Please retry the generation process.'\n    }\n  };\n}\n\nreturn {\n  json: {\n    projectId,\n    slide1: slides.slide1,\n    slide2: slides.slide2,\n    slide3: slides.slide3\n  }\n};"},"id":"dc34e55d-0d8f-4323-b5ad-02174cddbe1c","name":"Format Slides for PDF","type":"n8n-nodes-base.function","typeVersion":1,"position":[-48,-32]},{"parameters":{"method":"POST","url":"http://pdf-services:8000/generate-pdf","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{JSON.stringify({\n  projectId: $json.projectId,\n  slide1: $json.slide1,\n  slide2: $json.slide2,\n  slide3: $json.slide3\n})}}","options":{"response":{"response":{"responseFormat":"file"}},"timeout":60000}},"id":"1d6f1e0d-b27e-4bd8-909a-2c7349b6ca1c","name":"PDF Service - Generate PDF","type":"n8n-nodes-base.httpRequest","typeVersion":3,"position":[160,-32]},{"parameters":{"functionCode":"// Prepare S3 upload parameters\nconst projectId = $node['Parse API Payload'].json.projectId;\nconst userId = $node['Parse API Payload'].json.userId;\n\n// S3 key format: outputs/{userId}/{projectId}/result.pdf\nconst s3Key = `outputs/${userId}/${projectId}/result.pdf`;\nconst s3Bucket = 'sliderx-outputs-dev';\n\nreturn {\n  json: {\n    projectId,\n    userId,\n    s3Bucket,\n    s3Key\n  },\n  binary: {\n    data: $input.item.binary.data\n  }\n};"},"id":"2399c46b-9724-4816-8ac0-57cab8ec9c87","name":"Prepare S3 Upload","type":"n8n-nodes-base.function","typeVersion":1,"position":[352,-32]},{"parameters":{"operation":"upload","bucketName":"={{$json.s3Bucket}}","fileName":"={{ $json.s3Key }}","additionalFields":{}},"id":"3f3c3933-9dee-4480-9e55-b0bc53339e72","name":"S3 Upload Result PDF","type":"n8n-nodes-base.awsS3","typeVersion":1,"position":[560,-32],"credentials":{"aws":{"id":"b908eUeFHvhuq0qo","name":"AWS S3 SlideRx"}}},{"parameters":{"respondWith":"json","responseBody":"={{ { success: true, projectId: $node['Parse API Payload'].json.projectId, s3Key: $json.s3Key, message: 'Stage 2 completed - PDF uploaded to S3', status: 'ready' } }}","options":{}},"id":"f3a62e7e-1478-4dd8-a0ad-fb8cc05d86b7","name":"Webhook Response - Success","type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[752,-32]},{"parameters":{"conditions":{"string":[{"value1":"={{$json.error}}","operation":"isNotEmpty"}]}},"id":"db3f0848-b329-4784-bc4c-cfaf23b5dcaa","name":"Check API Error","type":"n8n-nodes-base.if","typeVersion":1,"position":[-608,368],"alwaysOutputData":false},{"parameters":{"conditions":{"string":[{"value1":"={{$json.error}}","operation":"isNotEmpty"}]}},"id":"c9c64717-9020-4549-9525-a49473096d94","name":"Check AI Generation Error","type":"n8n-nodes-base.if","typeVersion":1,"position":[-256,176],"alwaysOutputData":false},{"parameters":{"conditions":{"string":[{"value1":"={{$json.error}}","operation":"isNotEmpty"}]}},"id":"fae886bc-17e3-4867-bc73-8defdf01ab83","name":"Check PDF Generation Error","type":"n8n-nodes-base.if","typeVersion":1,"position":[384,160],"alwaysOutputData":false},{"parameters":{"conditions":{"string":[{"value1":"={{$json.error}}","operation":"isNotEmpty"}]}},"id":"9fd77d32-1e9e-4f27-a7b6-21fc90e59d2d","name":"Check S3 Upload Error","type":"n8n-nodes-base.if","typeVersion":1,"position":[656,336],"alwaysOutputData":false},{"parameters":{"functionCode":"// Log error and format error response\nconst errorNode = $input.item.json;\nconst projectId = $node['Parse API Payload']?.json?.projectId || 'unknown';\n\nconst errorMessage = errorNode.error?.message || errorNode.message || 'Unknown error';\nconst errorStep = $node.name;\n\nconsole.error(`Stage 2 Error at ${errorStep}:`, errorMessage);\n\nreturn {\n  json: {\n    success: false,\n    projectId,\n    error: errorMessage,\n    failedAt: errorStep,\n    timestamp: new Date().toISOString()\n  }\n};"},"id":"4888a2b8-d2cd-4870-a190-adf5b8ad1b67","name":"Handle Stage 2 Error","type":"n8n-nodes-base.function","typeVersion":1,"position":[-48,272]},{"parameters":{"respondWith":"json","responseBody":"={{$json}}","options":{}},"id":"a7610e91-2390-4189-9910-8d0eac1d451c","name":"Webhook Response - Error","type":"n8n-nodes-base.respondToWebhook","typeVersion":1,"position":[304,336]}],"connections":{"Webhook Trigger Stage 2":{"main":[[{"node":"Parse API Payload","type":"main","index":0}]]},"Parse API Payload":{"main":[[{"node":"Prepare AI Prompt","type":"main","index":0},{"node":"Check API Error","type":"main","index":0}]]},"Prepare AI Prompt":{"main":[[{"node":"AI Generate 3 Slides","type":"main","index":0}]]},"AI Generate 3 Slides":{"main":[[{"node":"Format Slides for PDF","type":"main","index":0},{"node":"Check AI Generation Error","type":"main","index":0}]]},"Format Slides for PDF":{"main":[[{"node":"PDF Service - Generate PDF","type":"main","index":0}]]},"PDF Service - Generate PDF":{"main":[[{"node":"Prepare S3 Upload","type":"main","index":0},{"node":"Check PDF Generation Error","type":"main","index":0}]]},"Prepare S3 Upload":{"main":[[{"node":"S3 Upload Result PDF","type":"main","index":0}]]},"S3 Upload Result PDF":{"main":[[{"node":"Webhook Response - Success","type":"main","index":0},{"node":"Check S3 Upload Error","type":"main","index":0}]]},"Check API Error":{"main":[[{"node":"Handle Stage 2 Error","type":"main","index":0}]]},"Check AI Generation Error":{"main":[[{"node":"Handle Stage 2 Error","type":"main","index":0}]]},"Check PDF Generation Error":{"main":[[{"node":"Handle Stage 2 Error","type":"main","index":0}]]},"Check S3 Upload Error":{"main":[[{"node":"Handle Stage 2 Error","type":"main","index":0}]]},"Handle Stage 2 Error":{"main":[[{"node":"Webhook Response - Error","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"23953fff-3456-4cb9-86ba-bad28266ceea","triggerCount":1,"tags":[],"shared":[{"createdAt":"2025-10-10T09:24:27.629Z","updatedAt":"2025-10-10T09:24:27.629Z","role":"workflow:owner","workflowId":"OaoFNZqV0G03T5Z4","projectId":"NPdtZYmJDo2KsnuU","project":{"createdAt":"2025-10-08T18:37:11.827Z","updatedAt":"2025-10-08T18:39:04.073Z","id":"NPdtZYmJDo2KsnuU","name":"Talab Elmharek <talab74@gmail.com>","type":"personal","icon":null,"description":null}}]}]